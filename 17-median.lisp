(defun partition (x xs)
   (if (endp xs)
       (mv nil nil)
       (mv-let (less more)
               (partition x (rest xs))
          (if (< (first xs) x)
              (mv (cons (first xs) less) more)
              (mv less (cons (first xs) more))))))

(defun qsort (xs)
   (if (endp xs)
       nil
       (mv-let (less more)
               (partition (first xs) (rest xs))
          (append (qsort less)
                  (list (first xs))
                  (qsort more)))))

(defun median (xs)
   (let ((l (len xs)))
        (if (= (mod l 2) 1)
            (nth (floor l 2) xs)
            (let ((rst (nthcdr (1- (floor l 2)) xs)))
                 (/ (+ (first rst) (second rst)) 2)))))
